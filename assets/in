#!/bin/bash

set -euo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=$(mktemp "input.XXXXXX")

cat > "${payload}" <&0

target_directory="${1}"

if [ -z "${target_directory}" ]; then
  echo "invalid invocation (missing target directory)"
  exit 1
fi

artifactory_root_url_artifacts=$(jq -r '.source.artifactory_root_url_artifacts // "https://artifact-public.instana.io/artifactory/shared"' < "${payload}")
username=$(jq -r '.source.username // "_"' < "${payload}")
download_key=$(jq -r '.source.download_key // ""' < "${payload}")
feature_group=$(jq -r '.source.feature_group // "com.instana"' < "${payload}")
feature_artifact=$(jq -r '.source.feature_artifact // "sensor-feature"' < "${payload}")
feature_name=$(jq -r '.source.feature_name // ""' < "${payload}")
file_name=$(jq -r '.source.file_name // ""' < "${payload}")
skip_ssl_verification=$(jq -r '.source.skip_ssl_verification // ""' < "${payload}")
debug=$(jq -r '.source.debug // ""' < "${payload}")

skip_download="$(jq -r '.params.skip_download // false' < $payload)"

if [ -n "${debug}" ]; then
  set -x
fi

artifact_version_string=$(jq -r '.version.version_string // ""' < $payload)

if [ -z "${artifactory_root_url_artifacts}" ]; then
  echo "invalid payload (missing artifactory_root_url_artifacts)"
  exit 1
fi

if [ -z "${username}" ]; then
  echo "invalid payload (missing username)"
  exit 1
fi

if [ -z "${download_key}" ]; then
  echo "invalid payload (missing download_key)"
  exit 1
fi

if [ -z "${artifact_version_string}" ]; then
  echo "invalid payload (missing '.version.version')"
  echo "received payload:"

  cat "${payload}"

  exit 1
fi

artifact_group=$(sed 's|\([^/]*\)/.*|\1|g' <<< ${artifact_version_string})
artifact_name=$(sed 's|[^/]*/\([^/]*\)/.*|\1|g' <<< ${artifact_version_string})
artifact_version=$(sed 's|[^/]*/[^/]*/\([^/]*\)|\1|g' <<< ${artifact_version_string})

if [ -z "${artifact_group}" ]; then
  echo "invalid version string (could not parse the artifact group)"
  echo "expected a format like org.my.group/artifact-name/1.2.3, received version is: ${artifact_version_string}, "
  exit 1
fi
if [ -z "${artifact_name}" ]; then
  echo "invalid version string (could not parse the artifact name)"
  echo "expected a format like org.my.group/artifact-name/1.2.3, received version is: ${artifact_version_string}, "
  exit 1
fi
if [ -z "${artifact_version}" ]; then
  echo "invalid version string (could not parse the artifact name)"
  echo "expected a format like org.my.group/artifact-name/1.2.3, received version is: ${artifact_version_string}, "
  exit 1
fi

echo "${artifact_version}" > "${target_directory}/version"

if [ "$skip_download" = "false" ]; then

  if [ -z "${file_name}" ]; then
    echo "invalid payload (missing file_name)"
    exit 1
  fi

  args_security=

  [ -n "$username" ] && args_security="-u $username";
  [ -n "$download_key" ] && args_security="$args_security:$download_key";

  [ "${skip_ssl_verification}" = 'true' ] && args_security="$args_security -k";

  # ${file_name} will most likely also contain the substring ":version", so we actually need to substitute the version in
  # two places in the preliminary artifact url
  preliminary_artifact_url="${artifactory_root_url_artifacts}/${artifact_group//.//}/${artifact_name}/:version/${file_name}"
  full_artifact_url="${preliminary_artifact_url//:version/${artifact_version}}"

  readonly final_file_name=$(basename "${full_artifact_url}")
  readonly target_file="${target_directory}/${final_file_name}"

  if ! curl --silent --fail --show-error ${args_security} -o "${target_file}" "${full_artifact_url}"; then
    echo "Download failed: ${full_artifact_url}"
    exit 1
  fi

  readonly etag=$(sha256sum < "${target_file}" | awk '{ print $1 }')

  echo "{\"file_name\":\"${final_file_name}\",\"etag\":\"${etag}\",\"group\":\"${artifact_group}\",\"artifact\":\"${artifact_name}\",\"version\":\"${artifact_version}\"}" > "${target_directory}/metadata.json"

  echo "{\"version\":{\"version_string\":\"${artifact_version_string}\"},\"metadata\":[{\"name\":\"file_name\",\"value\":\"${final_file_name}\"},{\"name\":\"etag\",\"value\":\"${etag}\"},{\"name\":\"group\",\"value\":\"${artifact_group}\"},{\"name\":\"artifact\",\"value\":\"${artifact_name}\"},{\"name\":\"version\",\"value\":\"${artifact_version}\"}]}" >&3

else

  echo "{\"group\":\"${artifact_group}\",\"artifact\":\"${artifact_name}\",\"version\":\"${artifact_version}\"}" > "${target_directory}/metadata.json"

  echo "{\"version\":{\"version_string\":\"${artifact_version_string}\"},\"metadata\":[{\"name\":\"group\",\"value\":\"${artifact_group}\"},{\"name\":\"artifact\",\"value\":\"${artifact_name}\"},{\"name\":\"version\",\"value\":\"${artifact_version}\"}]}" >&3

fi
